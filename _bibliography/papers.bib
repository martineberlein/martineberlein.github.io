@inproceedings{10.1145/3691620.3695347,
  author = {Smytzek, Marius and Eberlein, Martin and Werk, Kai and Grunske, Lars and Zeller, Andreas},
  title = {FixKit: A Program Repair Collection for Python},
  year = {2024},
  abstract = {In recent years, automatic program repair has gained much attention in the research community. Generally, program repair approaches consider a faulty program and a test suite that captures the program's intended behavior. The goal is automatically generating a patch that corrects the fault by identifying the faulty code locations, suggesting a candidate fix, and validating it against the provided tests. However, most existing program repair tools focus on Java or C programs, while Python, one of the most popular programming languages, lacks approaches that work on it.We present FixKit, a collection of five program repair approaches for Python programs. Moreover, our framework allows for easy integration of new repair approaches and swapping individual components, such as fault localization. Our framework enables researchers to compare and investigate various repair, fault localization effortlessly, and validation approaches on a common set of techniques.},
  booktitle = {Proceedings of the 39th IEEE/ACM International Conference on Automated Software Engineering},
  series = {ASE '24},
  bibtex_show={true},
  preview={doctest_thumbnail.png},
}


@inproceedings{DBLP:conf/sigsoft/SmytzekESGZ24,
  bibtex_show={true},
  author       = {Marius Smytzek and
                  Martin Eberlein and
                  Batuhan Serce and
                  Lars Grunske and
                  Andreas Zeller},
  title        = {Tests4Py: {A} Benchmark for System Testing},
  booktitle    = {Companion Proceedings of the 32nd {ACM} International Conference on
                  the Foundations of Software Engineering, {FSE} 2024, Porto de Galinhas,
                  Brazil, July 15-19, 2024},
  year         = {2024},
  preview={arachne_thumbnail.png},
}

@inproceedings{DBLP:conf/se/EberleinSSGZ24,
  bibtex_show={true},
  author       = {Martin Eberlein and
                  Marius Smytzek and
                  Dominic Steinh{\"{o}}fel and
                  Lars Grunske and
                  Andreas Zeller},
  title        = {Semantic Debugging},
  booktitle    = {Software Engineering 2024, Fachtagung des GI-Fachbereichs Softwaretechnik,
                  Linz, Austria, February 26 - March 1, 2024},
  year         = {2024},
  preview={doctest_thumbnail.png},
}


@inproceedings{DBLP:conf/sigsoft/EberleinSSGZ23,
  bibtex_show={true},
  selected={true},
  author       = {Martin Eberlein and
                  Marius Smytzek and
                  Dominic Steinh{\"{o}}fel and
                  Lars Grunske and
                  Andreas Zeller},
  title        = {Semantic Debugging},
  booktitle    = {Proceedings of the 31st {ACM} Joint European Software Engineering
                  Conference and Symposium on the Foundations of Software Engineering,
                  {ESEC/FSE} 2023, San Francisco, CA, USA, December 3-9, 2023},
  year         = {2023},
  preview={autofl_thumbnail.png},
}

@inproceedings{DBLP:conf/sigsoft/Eberlein22,
  bibtex_show={true},
  author       = {Martin Eberlein},
  title        = {Explaining and debugging pathological program behavior},
  booktitle    = {Proceedings of the 30th {ACM} Joint European Software Engineering
                  Conference and Symposium on the Foundations of Software Engineering,
                  {ESEC/FSE} 2022, Singapore, Singapore, November 14-18, 2022},
  year={2022},
  preview={bapp_thumbnail.png},
}

@inproceedings{DBLP:conf/ssbse/EberleinN0G20,
  bibtex_show={true},
  title={Evolutionary Grammar-Based Fuzzing},
  author={Martin Eberlein and
          Yannic Noller and
          Thomas Vogel and
          Lars Grunske},
  year={2020},
  booktitle={Search-Based Software Engineering - 12th International Symposium, {SSBSE} 2020, Bari, Italy, October 7-8, 2020, Proceedings},
  preview={libro_thumbnail.png},
  abstract = {Many works have recently proposed the use of Large Language Model (LLM) based agents for performing 'repository level' tasks, loosely defined as a set of tasks whose scopes are greater than a single file. This has led to speculation that the orchestration of these repository-level tasks could lead to software engineering agents capable of performing almost independently of human intervention. However, of the suite of tasks that would need to be performed by this autonomous software engineering agent, we argue that one important task is missing, which is to fulfil project level dependency by installing other repositories. To investigate the feasibility of this repository level installation task, we introduce a benchmark of of repository installation tasks curated from 40 open source Python projects, which includes a ground truth installation process for each target repository. Further, we propose INSTALLAMATIC, an agent whose goal is to perform and verify the installation of a given repository by searching for relevant instructions from documentations in the repository. We evaluate our agent using this benchmark, and report that 55% of the studied repositories can be automatically installed by our agent. Through the results of our empirical evaluation, we identify the common causes for our agent's inability to install a repository, discuss the challenges faced in the design and implementation of such an agent and consider the implications that such an agent could have for developers.},
}